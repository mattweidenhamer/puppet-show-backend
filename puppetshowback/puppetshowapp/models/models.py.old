from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager
import uuid
import os
from enum import Enum
import deprecated


# TODO layout needs to be restructured.
# Currently, the layout has individual actors with individual hashes for every single scene.
# Instead, what needs to happen is that each main user makes a list of Discord IDs linked
# Exclusively to their configuration, and then the active scene will configure how each of
# Those listed users are displayed. This way, the user can have a single actor that changes
# Depending on the scene, rather than a large number of actors.

#################################################################
# Helper Functions
#################################################################


def user_pfp_path(instance, filename):
    return f"profiles/{instance.user_username}/{filename}"


def user_actor_path(instance, filename):
    return f"profiles/{instance.actor_base_user.user_username}/{filename}"


#################################################################
# Data models
#################################################################


# class Image(models.Model):
#     image = models.ImageField(upload_to=user_pfp_path)


#################################################################
# User Data Models
#################################################################


# The user's snowflake, Discord Name, and any other neccesary parts
@deprecated
class DiscordData(models.Model):
    user_snowflake = models.CharField(max_length=20, unique=True)
    user_username = models.CharField(max_length=100)
    user_discriminator = models.CharField(max_length=4)

    # TODO if we every start capturing profile pictures
    profile_picture = models.ImageField(upload_to=user_pfp_path)

    def __str__(self) -> str:
        return str(self.user_username)

    class Meta:
        db_table = "discord_user_data"


@deprecated
class DiscordPointingUserManager(BaseUserManager):
    def create_user_from_snowflake(self, password, discord_snowflake):
        if not discord_snowflake:
            raise ValueError("Email and discord snowflake must be passed.")
        discord, created = DiscordData.objects.get_or_create(
            user_snowflake=discord_snowflake
        )
        if created:
            print("Created an empty discord user for account")
            # TODO will need to also grab and sync discord information
        user = self.model(discord_data=discord)
        user.set_password(password)
        user.save()
        return user

    def create_superuser_from_snowflake(self, password, discord_snowflake):
        user = self.create_user_from_snowflake(password, discord_snowflake)
        user.is_superuser = True
        user.save()
        return user

    def create_user(self, password, discord_data):
        if not discord_data:
            raise ValueError("Discord dataiscord data must be passed.")
        user = self.model(discord_data=discord_data)
        user.set_password(password)
        user.save()
        return user

    def create_superuser(self, password, discord_data):
        user = self.create_user(password, discord_data)
        user.is_superuser = True
        user.save()
        return user


@deprecated
class DiscordPointingUser(AbstractBaseUser):
    # TODO add components and function neccesary for token refreshing
    # TODO seperate models into seperate files
    login_username = models.CharField(max_length=25, unique=True)
    uuid = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    discord_data = models.OneToOneField(DiscordData, on_delete=models.DO_NOTHING)
    is_superuser = models.BooleanField(default=False)
    auth_token = models.CharField(max_length=100)
    created_date = models.DateTimeField(auto_now_add=True)
    active_scene = models.ForeignKey(Scene, on_delete=models.DO_NOTHING)

    objects = DiscordPointingUserManager()
    USERNAME_FIELD = "login_username"
    REQUIRED_FIELDS = ["discord_data"]

    def __str__(self) -> str:
        if self.discord_data.user_username is None:
            return self.user_id
        return self.discord_data.user_username

    def has_perm(self, perm, obj=None):
        if self.is_superuser:
            return True
        elif isinstance(obj, Actor):
            if obj.scene.scene_author.pk == self.pk:
                return True
            return False
        elif isinstance(obj, Scene):
            if obj.scene_author.pk == self.pk:
                return True
            return False
        return False

    def get_owner(self):
        return self

    def has_module_perms(self, app_label):
        return self.is_superuser

    @property
    def is_staff(self):
        return self.is_superuser

    def save(self, *args, **kwargs):
        if not self.login_username:
            self.login_username = f"{self.discord_data.user_snowflake}#{self.discord_data.user_discriminator}"
        super().save(*args, **kwargs)


################################################################
# Object Models
################################################################


# A "scene" is a configuration of a certain set of actors.
# Each has their own
@deprecated
class Scene(models.Model):
    scene_author = models.ForeignKey(DiscordPointingUser, on_delete=models.CASCADE)
    scene_name = models.CharField(max_length=30)

    def __str__(self) -> str:
        return f"{self.scene_author} {self.scene_name} scene"

    # Include any further needed names for configuration

    class Meta:
        db_table = "scenes"

    def get_owner(self):
        return self.scene_author


# An "Actor" is a visualization of the user in a scene.
# It is the main representation of the screen that a user gets.
@deprecated
class Actor(models.Model):
    class Attributes(Enum):
        SPEAKING = "speaking"
        NOT_SPEAKING = "not_speaking"
        SLEEPING = "sleeping"
        CONNECTION = "connection"
        DISCONNECT = "disconnect"

    # A unique hash of the person's ID, the emotion name,
    # TODO consider using slugs
    actor_hash = models.UUIDField(default=uuid.uuid4)

    # The ID of the user actually being drawn
    actor_base_user = models.ForeignKey(DiscordData, on_delete=models.CASCADE)

    # A display name for the actor
    actor_name = models.CharField(max_length=30)

    # What Scene they belong to
    scene = models.ForeignKey(Scene, on_delete=models.CASCADE)

    # Default animations
    speaking_animation = models.ImageField(upload_to=user_actor_path)
    not_speaking_animation = models.ImageField(upload_to=user_actor_path)

    # When not speaking for a while, NYI
    sleeping_animation = models.ImageField(null=True, blank=True)

    # NYI
    connection_animation = models.ImageField(null=True, blank=True)
    disconnect_animation = models.ImageField(null=True, blank=True)

    class Meta:
        db_table = "charactor_actors"

    def get_owner(self):
        return self.scene.scene_author

    def __str__(self) -> str:
        return f"{self.actor_base_user} {self.scene.scene_name}"

    def save(self, *args, **kwargs):
        if self.actor_name is None or self.actor_name == "":
            self.actor_name = self.actor_base_user.user_username
        super().save(*args, **kwargs)

    def setImage(self, attribute, image):
        def _deleteImage(image):
            try:
                if os.path.isfile(image.path):
                    os.remove(image.path)
            except ValueError:
                pass

        # TODO there's got to be a better way to code this
        if attribute == self.Attributes.SPEAKING:
            _deleteImage(self.speaking_animation)
            self.speaking_animation = image
        elif attribute == self.Attributes.NOT_SPEAKING:
            _deleteImage(self.not_speaking_animation)
            self.not_speaking_animation = image
        elif attribute == self.Attributes.SLEEPING:
            _deleteImage(self.sleeping_animation)
            self.sleeping_animation = image
        elif attribute == self.Attributes.CONNECTION:
            _deleteImage(self.connection_animation)
            self.connection_animation = image
        elif attribute == self.Attributes.DISCONNECT:
            _deleteImage(self.disconnect_animation)
            self.disconnect_animation = image
        else:
            raise AttributeError("Invalid attribute")

    # # Overwrite the default save function
    # Not used, but saved for posterity
    # def save(self, *args, **kwargs):
    #     prehash_string = (
    #         str(self.actor_base_user.user_snowflake)
    #         + str(self.scene.scene_name)
    #         + str(self.pk)
    #     )
    #     hasher = md5(prehash_string, usedforsecurity=False)
    #     self.actor_hash = hasher.hexdigest()
    #     super().save(*args, **kwargs)


# An "emotion" is an extra configuration of states.
# Eventually, a user from another portion of the site should be able to push a button
# that changes their emotion on the website.

# NYI


@deprecated
class Emotion(models.Model):
    # A unique hash of the person's ID, the emotion name,
    emotion_hash = models.CharField(max_length=200)

    # The emotion "name," default to "Neutral"
    emotion_name = models.CharField(max_length=15, default="Neutral")

    # What actor they belong to
    actor = models.ForeignKey(Actor, on_delete=models.CASCADE)

    # Default animations
    speaking_animation = models.ImageField(upload_to=user_actor_path)
    not_speaking_animation = models.ImageField(upload_to=user_actor_path)

    # When not speaking for a while, NYI
    sleeping_animation = models.ImageField(upload_to=user_actor_path)

    # NYI
    connection_animation = models.ImageField(upload_to=user_actor_path)
    disconnect_animation = models.ImageField(upload_to=user_actor_path)

    class Meta:
        db_table = "character_emotions"
